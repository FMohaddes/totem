import { filter } from "lodash";
import React , { useEffect , useState } from "react";
// material
import { useTheme } from "@mui/material/styles";
import {
     Card ,
     Checkbox ,
     Container ,
     Table ,
     TableBody ,
     TableCell ,
     TableContainer ,
     TablePagination ,
     TableRow ,
     Tooltip ,
     Typography
} from "@mui/material";
// redux
import { useDispatch , useSelector } from "../../../redux/store";
// routes
import { PATH_DASHBOARD } from "../../../routes/paths";
// hooks
import useSettings from "../../../hooks/useSettings";
// components
import Page from "../../../components/Page";
import Scrollbar from "../../../components/Scrollbar";
import SearchNotFound from "../../../components/SearchNotFound";
import HeaderBreadcrumbs from "../../../components/HeaderBreadcrumbs";
import { useNavigate } from "react-router-dom";
import {
     ListHead ,
     ListToolbar ,
     MoreMenu
} from "../../../components/_dashboard/customer/customer-approval/tables";
import { getShopsFromKarAmadList } from "../../../redux/slices/shop";
import axios from "../../../utils/axiosinstance";
import { useSnackbar } from "notistack";
import { numberSeparator } from "../../../utils/formatNumber";
import moment from "moment-jalaali";
import LoadingScreen from "../../../components/LoadingScreen";

// ----------------------------------------------------------------------

const TABLE_HEAD = [
     { id : "CustomerName" , label : "نام مشتری" , alignRight : false } ,
     { id : "BranchName" , label : "نام شعبه" , alignRight : false } ,
     { id : "BranchCode" , label : "کد شعبه" , alignRight : false } ,
     { id : "CustomerCode" , label : "کد مشتری " , alignRight : false } ,
     { id : "CustomerRef" , label : "کد مشتری در ویتانا " , alignRight : false } ,
     
     {
          id                                                        : "\n" +
               "FactorMasterT" , label : "تعداد کارتن" , alignRight : false
     } ,
     { id : "FactorPriceP" , label : "خالص پرداختی ( ریال )" , alignRight : false } ,
     { id : "FactorSKU" , label : "سطر" , alignRight : false } ,
     { id : "" }
];

// ----------------------------------------------------------------------

function descendingComparator( a , b , orderBy ) {
     if (a && b && b[ orderBy ] < a[ orderBy ] ) {
          return -1;
     }
     if (a && b && b[ orderBy ] > a[ orderBy ] ) {
          return 1;
     }
     return 0;
}

function getComparator( order , orderBy ) {
     return order === "desc"
          ? ( a , b ) => descendingComparator( a , b , orderBy )
          : ( a , b ) => -descendingComparator( a , b , orderBy );
}

function applySortFilter( array , comparator , query ) {
     const stabilizedThis = array.map( ( el , index ) => [ el , index ] );
     stabilizedThis.sort( ( a , b ) => {
          const order = comparator( a[ 0 ] , b[ 0 ] );
          if ( order !== 0 ) return order;
          return a[ 1 ] - b[ 1 ];
     } );
     if ( query ) {
          return filter( array , ( _contract ) => _contract.CustomerName.toString().indexOf( query.toString() ) !== -1 );
          
     }
     return stabilizedThis.map( ( el ) => el[ 0 ] );
}

export default function ShopsApproval() {
     const { themeStretch } = useSettings();
     const theme = useTheme();
     const dispatch = useDispatch();
     const { isLoading , shopsFromKarAmadList :kar } = useSelector( ( state ) => state.shop );
     const [ page , setPage ] = useState( 0 );
     const [ order , setOrder ] = useState( "asc" );
     const [ selected , setSelected ] = useState( [] );
     const [ orderBy , setOrderBy ] = useState( "branchName" );
     const [ filterName , setFilterName ] = useState( "" );
     const [ branchCode , setBranchCode ] = useState( null );
     
     let navigate = useNavigate();
     const { enqueueSnackbar } = useSnackbar();
     const [ rowsPerPage , setRowsPerPage ] = useState( 10 );
     const [ filterData , setFilterData ] = useState( false );
     const [ startAndEndContractDate , setStartAndEndContractDate ] = useState( () => [ null , null ] );
     const [ formatedDate , setFormatedDate ] = useState( () => [ moment().add( 1 , "days" ).locale( "en-US" ).format( "YYYY-MM-DD" ) ,
                                                                  moment().add( 2 , "days" ).locale( "en-US" ).format( "YYYY-MM-DD" ) ] );
     
     const fakeRows=[ ...Array( rowsPerPage*page ) ]
     const shopsFromKarAmadList=fakeRows.concat(kar?.shops);
     useEffect( () => {
          dispatch( getShopsFromKarAmadList( (rowsPerPage )  , page , formatedDate[ 0 ] , formatedDate[ 1 ] , branchCode , filterName ) );
          
     } , [ dispatch , filterData ,rowsPerPage , page ] );
     
     const handleRequestSort = ( event , property ) => {
          const isAsc = orderBy === property && order === "asc";
          setOrder( isAsc ? "desc" : "asc" );
          setOrderBy( property );
     };
     
     const handleSelectAllClick = ( event ) => {
          if ( event.target.checked ) {
               const newSelecteds = shopsFromKarAmadList.map( ( n ) => n._id );
               setSelected( newSelecteds );
               return;
          }
          setSelected( [] );
     };
     
     const handleClick = ( event , _id ) => {
          const selectedIndex = selected.indexOf( _id );
          
          let newSelected = [];
          if ( selectedIndex === -1 ) {
               newSelected = newSelected.concat( selected , _id );
          } else if ( selectedIndex === 0 ) {
               newSelected = newSelected.concat( selected.slice( 1 ) );
          } else if ( selectedIndex === selected.length - 1 ) {
               newSelected = newSelected.concat( selected.slice( 0 , -1 ) );
          } else if ( selectedIndex > 0 ) {
               newSelected = newSelected.concat( selected.slice( 0 , selectedIndex ) , selected.slice( selectedIndex + 1 ) );
          }
          setSelected( newSelected );
     };
     
     const handleChangePage = ( event , newPage ) => {
          setPage( newPage );
     };
     
     const handleChangeRowsPerPage = ( event ) => {
          setRowsPerPage( parseInt( event.target.value , 10 ) );
          setPage( 0 );
     };
     
     const confirmSelect = async () => {
          const newSelected = []
          
          const findSelectedProp = selected.map( s => {
                    const selectedShop = shopsFromKarAmadList.find( sh => sh._id === s )
                    
                    if ( selectedShop ) {
                         newSelected.push( {
                              codeInBranch : selectedShop.CustomerCode ,
                              branchCode   : selectedShop.BranchCode ,
                              codeInVitana : selectedShop.CustomerRef ,
                              branchName : selectedShop.BranchName ,
                              shopName : selectedShop.CustomerName
                         } )
                    }
               }
          )
          const { data } = await axios.post( `shops/confirm` , { shops : newSelected } );
          if ( data.code === 200 ) {
               enqueueSnackbar( "تایید موفق فروشگاه " , { variant : "success" } );
               setFilterData( !filterData )
               
               
          } else {
               enqueueSnackbar( data.msg , { variant : "error" } );
          }
          
          setSelected( [] )
     }
     
     const confirmSelectId = async ( id , BranchName
          , CustomerName , CustomerCode , branchCode , CustomerRef ) => {
          const newSelected = []
          const { data } = await axios.post( `shops/confirm` , {
               shops : [ {
                    codeInBranch : CustomerCode ,
                    codeInVitana : CustomerRef , branchName : BranchName , shopName : CustomerName
                    , branchCode
               } ]
          } );
          if ( data.code === 200 ) {
               enqueueSnackbar( "تایید موفق فروشگاه " , { variant : "success" } );
               setFilterData( !filterData )
               
               // navigate( PATH_DASHBOARD.shop.signingContracts );
               
          } else {
               enqueueSnackbar( data.msg , { variant : "error" } );
          }
          
          setSelected( [] )
     }
     
     const handleFilterByName = ( event ) => {
          setFilterName( event.target.value );
     };
     const handleFilter = ( event ) => {
          setFilterData( !filterData )
     };
     const handleFilterByBranchCode = ( event ) => {
          setBranchCode( event.target.value );
     };
     const handleDate = ( DateE ) => {
          // const rr=moment(parseInt(DateE)).jYear()
          let date = moment( DateE , "YYYY-MM-DD" )
          return date.locale( "fa-IR" ).format( "jYYYY/jMM/jDD" )
          // const c=moment(rr).format( 'yyyy-MM-dd')
          
     };
     
     const emptyRows = page > 0 ? Math.max( 0 , (1 + page) * rowsPerPage - shopsFromKarAmadList?.length ) : 0;
     
     const filteredUsers = shopsFromKarAmadList?.length > 0 ? applySortFilter( shopsFromKarAmadList , getComparator( order , orderBy ) , filterName ) : [];
     
     const isUserNotFound = filteredUsers.length === 0;
     
     return (
          <Page title = "طرف قراردادان : لیست فروشگاه ها " >
               <Container maxWidth = { themeStretch ? false : "lg" } >
                    <HeaderBreadcrumbs
                         heading = "تایید اولیه فروشگاه ها"
                         links = { [
                              { name : "داشبورد" , href : PATH_DASHBOARD.root } ,
                              { name : "فروشگاه ها" , href : PATH_DASHBOARD.shop.root } ,
                              { name : "لیست فروشگاه ها" }
                         ] }
                    />
                    {
                         isLoading ? <LoadingScreen/>:
                         <Card >
                              <ListToolbar numSelected = { selected.length } filterName = { filterName }
                                   onFilterName = { handleFilterByName }
                                   startAndEndContractDate = { startAndEndContractDate }
                                   onVerify = { confirmSelect }
                                   setStartAndEndContractDate = { setStartAndEndContractDate }
                                   setFormatedDate = { setFormatedDate } formatedDate = { formatedDate }
                                   onBranchCode = { handleFilterByBranchCode }
                                   branchCode = { branchCode } onFilter = { handleFilter }
                                   
                              />
                              
                              <Scrollbar >
                                   <TableContainer sx = { { minWidth : 800 } } >
                                        <Table >
                                             <ListHead
                                                  order = { order }
                                                  orderBy = { orderBy }
                                                  headLabel = { TABLE_HEAD }
                                                  rowCount = { shopsFromKarAmadList?.length }
                                                  numSelected = { selected.length }
                                                  onRequestSort = { handleRequestSort }
                                                  onSelectAllClick = { handleSelectAllClick }
                                             />
                                             <TableBody >
                                              
                                                  
                                                  { shopsFromKarAmadList?.length > 1 && filteredUsers.slice( page * rowsPerPage , page * rowsPerPage + rowsPerPage ).map( ( row ) => {
                                                       const {
                                                            
                                                                  id ,
                                                                  FactorMasterT ,
                                                                  FactorSKU ,
                                                                  FactorPriceP ,
                                                                  CustomerCode ,
                                                                  CustomerName ,
                                                                  BranchName ,
                                                                  BranchCode ,
                                                                  CustomerRef ,
                                                                  DateE ,
                                                                  _id ,
                                                            
                                                            
                                                             } = row;
                                                       const isItemSelected = selected.indexOf( _id ) !== -1;
                                                       
                                                       return (
                                                            
                                                            <TableRow
                                                                 hover
                                                                 key = { id }
                                                                 tabIndex = { -1 }
                                                                 role = "checkbox"
                                                                 selected = { isItemSelected }
                                                                 aria-checked = { isItemSelected }
                                                            >
                                                                 <TableCell padding = "checkbox" >
                                                                      <Checkbox checked = { isItemSelected }
                                                                           onChange = { ( event ) => handleClick( event , _id , BranchName
                                                                                , CustomerName , CustomerCode , branchCode , CustomerRef
                                                                                , FactorPriceP ) } />
                                                                 </TableCell >
                                                                 <TableCell component = "th" scope = "row"
                                                                      style = { {
                                                                           maxWidth : 170 ,
                                                                           minWidth : 150
                                                                      } }
                                                                      padding = "5" >
                                                                      <Tooltip title = { CustomerName } >
                                                                           <Typography variant = "subtitle2"
                                                                                noWrap >
                                                                                { CustomerName }
                                                                           </Typography >
                                                                      </Tooltip >
                                                                 </TableCell >
                                                                 <TableCell component = "th" scope = "row"
                                                                      style = { { maxWidth : 160 } }
                                                                      padding = "none" >
                                                                      <Tooltip title = { BranchName } >
                                                                           <Typography variant = "subtitle2"
                                                                                noWrap >
                                                                                { BranchName }
                                                                           </Typography >
                                                                      </Tooltip >
                                                                 </TableCell >
                                                                 <TableCell align = "left"
                                                                      style = { { maxWidth : 150 } } >
                                                                      { BranchCode }
                                                                 </TableCell >
                                                                 
                                                                 <TableCell align = "left"
                                                                      style = { { minWidth : 100 } } >
                                                                      { CustomerCode }
                                                                 </TableCell >
                                                                 <TableCell align = "left"
                                                                      style = { { minWidth : 100 } } >
                                                                      { CustomerRef }
                                                                 </TableCell >
                                                                 {/*<TableCell align = "left"*/ }
                                                                 {/*     style = { { minWidth : 100 } } >*/ }
                                                                 {/*     {*/ }
                                                                 {/*         handleDate(DateE)*/ }
                                                                 
                                                                 {/*     }*/ }
                                                                 {/*</TableCell >*/ }
                                                                 <TableCell align = "left"
                                                                      style = { { minWidth : 120 } } >
                                                                      {
                                                                           FactorMasterT }
                                                                 </TableCell >
                                                                 
                                                                 <TableCell align = "left"
                                                                      style = { { minWidth : 200 } } >
                                                                      {FactorPriceP && numberSeparator( FactorPriceP ) }
                                                                 </TableCell >
                                                                 
                                                                 <TableCell align = "left"
                                                                      style = { { minWidth : 100 } } >
                                                                      { FactorSKU }
                                                                 </TableCell >
                                                                 
                                                                 <TableCell align = "right" >
                                                                      <MoreMenu hasDelete = { false }
                                                                           onVerify = { () => confirmSelectId( _id , BranchName
                                                                                , CustomerName , CustomerCode , BranchCode , CustomerRef ) }
                                                                           hasPath = { false } />
                                                                 </TableCell >
                                                            
                                                            </TableRow >
                                                       );
                                                  } ) }
                                                  { emptyRows > 0 && (
                                                       <TableRow style = { { height : 53 * emptyRows } } >
                                                            <TableCell colSpan = { 6 } />
                                                       </TableRow >
                                                  ) }
                                             </TableBody >
                                             { isUserNotFound && (
                                                  <TableBody >
                                                       <TableRow >
                                                            <TableCell align = "center" colSpan = { 6 }
                                                                 sx = { { py : 3 } } >
                                                                 <SearchNotFound
                                                                      page = { "approval" }
                                                                      searchQuery = { filterName } />
                                                            </TableCell >
                                                       </TableRow >
                                                       
                                                  </TableBody >
                                             ) }
                                        </Table >
                                   </TableContainer >
                              </Scrollbar >
                              
                              <TablePagination
                                   component = "div"
                                   labelRowsPerPage = { "سطرها در هر صفحه" }
                                   rowsPerPageOptions = { [ 10 , 25 , 100 , 1000 ] }
                                   labelDisplayedRows = {
                                        ( { from , to , count } ) => {
                                             return "" + from + "-" + to + " از " + count;
                                        }
                                   }
                                   count = { kar?.count }
                                   rowsPerPage = { rowsPerPage }
                                   page = { page }
                                   onPageChange = { handleChangePage }
                                   onRowsPerPageChange = { handleChangeRowsPerPage }
                              />
                         </Card >
                         
                    }
               
               </Container >
          </Page >
     );
}
